# High availability service, in charge of periodically rolling dices and
# sending production requests through JMS.
class ProductionHAService
  #include TorqueBox::Injectors
  
  # Intializes the service, mainly defining production interval and
  # the jms queue.
  def initialize(options={})
    @queue = TorqueBox::Messaging::Queue.new(options['queue_name'])
    #@queue = inject('/queues/production_queue')
    @tick = options['sleep_time']
    Rails.logger.info "ProductionJob initialized ..."
  end

  # Starts the production
  def start
    Rails.logger.info "ProductionJob started"
    Thread.new { produce }
  end

  # Ends the production
  def stop
    Rails.logger.info "ProductionJob stopped"
    @done = true
  end

  private

  # Rolls sice and send a message for each active game
  # then sleeps
  def produce
    until @done
      begin
        roll = Dice.double_roll
        Game.all_by_states(['playing']).each do |game|
          next unless must_produce?(game)
          Rails.logger.debug "Publishing roll #{roll} to game #{game[:id]}"
          @queue.publish :roll => roll, :game => game[:id]
        end
        sleep(@tick)
      rescue Exception => ex
        Rails.logger.error "ProductionHAService: #{ex.message}"
      end
    end
  end

  private

  def must_produce?(game)
    Rails.logger.debug "GAME: #{game.inspect}"
    players_count = game[:player_count]
    tick_count = ( (Time.now - game[:created_at]).to_i / @tick)
    Rails.logger.debug "TICK: #{@tick} - #{@tick.class} | TICK COUNT: #{tick_count} | PLAYERS COUNT: #{players_count}"
    return case players_count
    when 1
      true
    when 2
      # every 2 ticks
      (tick_count % 2) == 0
    when 3, 4
      # every 3 ticks
      (tick_count % 3) == 0
    else
      Rails.logger.error "Error: A game have #{players_count} players! Min 1 max #{GameOptions.options(:base)[:max_player_limit]}."
      false
    end
  end
  
end
